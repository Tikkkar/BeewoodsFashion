import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ShoppingCart, Heart, Share2, ChevronLeft, Star, Truck, Shield, RefreshCw } from 'lucide-react';

const ProductDetailPage = ({ products, onAddToCart }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [product, setProduct] = useState(null);
  const [selectedSize, setSelectedSize] = useState('');
  const [quantity, setQuantity] = useState(1);
  const [activeTab, setActiveTab] = useState('description');

  // Wishlist state v·ªõi localStorage
  const [wishlist, setWishlist] = useState(() => {
    try {
      const saved = localStorage.getItem('dior_wishlist');
      return saved ? JSON.parse(saved) : [];
    } catch {
      return [];
    }
  });

  const [isWishlisted, setIsWishlisted] = useState(false);

  // Find product
  useEffect(() => {
    const foundProduct = products.find(p => p.id === parseInt(id));
    if (foundProduct) {
      setProduct(foundProduct);
    } else {
      navigate('/');
    }
  }, [id, products, navigate]);

  // Check if product is in wishlist
  useEffect(() => {
    if (product) {
      setIsWishlisted(wishlist.some(item => item.id === product.id));
    }
  }, [product, wishlist]);

  // Toggle wishlist
  const handleToggleWishlist = () => {
    let newWishlist;
    
    if (isWishlisted) {
      // Remove from wishlist
      newWishlist = wishlist.filter(item => item.id !== product.id);
      alert('üíî ƒê√£ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch');
    } else {
      // Add to wishlist
      newWishlist = [...wishlist, product];
      alert('‚ù§Ô∏è ƒê√£ th√™m v√†o danh s√°ch y√™u th√≠ch!');
    }
    
    setWishlist(newWishlist);
    setIsWishlisted(!isWishlisted);
    localStorage.setItem('dior_wishlist', JSON.stringify(newWishlist));
    
    // Dispatch custom event to update header
    window.dispatchEvent(new Event('wishlistUpdated'));
  };

  if (!product) {
    return (
      <div className="min-h-screen flex items-center justify-center pt-20">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-black mx-auto mb-4"></div>
          <p className="text-gray-600 tracking-wide">ƒêang t·∫£i...</p>
        </div>
      </div>
    );
  }

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const handleAddToCart = () => {
    if (!selectedSize) {
      alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn size!');
      return;
    }
    onAddToCart({
      ...product,
      size: selectedSize,
      quantity: quantity
    });
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: product.name,
        text: `Xem s·∫£n ph·∫©m ${product.name}`,
        url: window.location.href
      }).catch(() => {
        // Fallback: Copy URL
        navigator.clipboard.writeText(window.location.href);
        alert('üìã ƒê√£ copy link s·∫£n ph·∫©m!');
      });
    } else {
      // Fallback for browsers that don't support Web Share API
      navigator.clipboard.writeText(window.location.href);
      alert('üìã ƒê√£ copy link s·∫£n ph·∫©m!');
    }
  };

  const sizes = ['XS', 'S', 'M', 'L', 'XL'];

  return (
    <div className="min-h-screen bg-white pt-20 pb-16">
      {/* Back Button */}
      <div className="container mx-auto px-4 mb-8">
        <button
          onClick={() => navigate(-1)}
          className="flex items-center gap-2 text-gray-600 hover:text-black transition-colors"
        >
          <ChevronLeft size={20} />
          <span className="tracking-wide">Quay l·∫°i</span>
        </button>
      </div>

      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Product Images */}
          <div className="space-y-4">
            <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
              <img
                src={product.image}
                alt={product.name}
                className="w-full h-full object-cover hover:scale-105 transition-transform duration-500"
              />
            </div>
            
            {/* Thumbnail Gallery */}
            <div className="grid grid-cols-4 gap-4">
              {[1, 2, 3, 4].map((index) => (
                <div
                  key={index}
                  className="aspect-square bg-gray-100 rounded-lg overflow-hidden cursor-pointer border-2 border-transparent hover:border-black transition-colors"
                >
                  <img
                    src={product.image}
                    alt={`${product.name} - ${index}`}
                    className="w-full h-full object-cover"
                  />
                </div>
              ))}
            </div>
          </div>

          {/* Product Info */}
          <div className="space-y-6">
            <div className="text-sm text-gray-500 tracking-widest uppercase">
              {product.category}
            </div>

            <h1 className="text-3xl md:text-4xl font-light tracking-wide">
              {product.name}
            </h1>

            <div className="flex items-center gap-2">
              <div className="flex">
                {[1, 2, 3, 4, 5].map((star) => (
                  <Star key={star} size={18} className="fill-black text-black" />
                ))}
              </div>
              <span className="text-sm text-gray-600">(248 ƒë√°nh gi√°)</span>
            </div>

            <div className="text-3xl font-light tracking-wide">
              {formatPrice(product.price)}
            </div>

            <p className="text-gray-700 leading-relaxed">
              S·∫£n ph·∫©m cao c·∫•p t·ª´ b·ªô s∆∞u t·∫≠p m·ªõi nh·∫•t c·ªßa DIOR. 
              Thi·∫øt k·∫ø tinh t·∫ø, ch·∫•t li·ªáu cao c·∫•p, mang ƒë·∫øn s·ª± sang tr·ªçng 
              v√† ƒë·∫≥ng c·∫•p cho ng∆∞·ªùi s·ª≠ d·ª•ng.
            </p>

            {/* Size Selection */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <label className="text-sm tracking-widest uppercase font-medium">
                  Ch·ªçn Size
                </label>
                <button className="text-sm text-gray-600 hover:text-black underline">
                  H∆∞·ªõng d·∫´n ch·ªçn size
                </button>
              </div>
              <div className="grid grid-cols-5 gap-3">
                {sizes.map((size) => (
                  <button
                    key={size}
                    onClick={() => setSelectedSize(size)}
                    className={`
                      py-3 rounded-lg border-2 tracking-wide font-medium
                      transition-all duration-200
                      ${selectedSize === size
                        ? 'border-black bg-black text-white'
                        : 'border-gray-300 hover:border-black'
                      }
                    `}
                  >
                    {size}
                  </button>
                ))}
              </div>
            </div>

            {/* Quantity */}
            <div className="space-y-3">
              <label className="text-sm tracking-widest uppercase font-medium">
                S·ªë l∆∞·ª£ng
              </label>
              <div className="flex items-center gap-4">
                <button
                  onClick={() => setQuantity(Math.max(1, quantity - 1))}
                  className="w-12 h-12 border-2 border-gray-300 rounded-lg hover:border-black transition-colors"
                >
                  -
                </button>
                <span className="text-xl font-light w-12 text-center">{quantity}</span>
                <button
                  onClick={() => setQuantity(quantity + 1)}
                  className="w-12 h-12 border-2 border-gray-300 rounded-lg hover:border-black transition-colors"
                >
                  +
                </button>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="space-y-3">
              <button
                onClick={handleAddToCart}
                className="w-full bg-black text-white py-4 rounded-lg tracking-widest uppercase font-medium hover:bg-gray-800 transition-colors flex items-center justify-center gap-2"
              >
                <ShoppingCart size={20} />
                Th√™m v√†o gi·ªè h√†ng
              </button>
              
              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={handleToggleWishlist}
                  className={`
                    py-3 rounded-lg border-2 transition-colors flex items-center justify-center gap-2
                    ${isWishlisted
                      ? 'border-red-500 text-red-500 bg-red-50'
                      : 'border-gray-300 hover:border-black'
                    }
                  `}
                >
                  <Heart size={20} className={isWishlisted ? 'fill-red-500' : ''} />
                  <span className="tracking-wide">
                    {isWishlisted ? 'ƒê√£ th√≠ch' : 'Y√™u th√≠ch'}
                  </span>
                </button>
                
                <button 
                  onClick={handleShare}
                  className="py-3 rounded-lg border-2 border-gray-300 hover:border-black transition-colors flex items-center justify-center gap-2"
                >
                  <Share2 size={20} />
                  <span className="tracking-wide">Chia s·∫ª</span>
                </button>
              </div>
            </div>

            {/* Features */}
            <div className="border-t pt-6 space-y-4">
              <div className="flex items-start gap-3">
                <Truck size={24} className="text-gray-600 flex-shrink-0" />
                <div>
                  <h3 className="font-medium tracking-wide">Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn</h3>
                  <p className="text-sm text-gray-600">Giao h√†ng to√†n qu·ªëc trong 2-3 ng√†y</p>
                </div>
              </div>
              
              <div className="flex items-start gap-3">
                <Shield size={24} className="text-gray-600 flex-shrink-0" />
                <div>
                  <h3 className="font-medium tracking-wide">Ch√≠nh h√£ng 100%</h3>
                  <p className="text-sm text-gray-600">Cam k·∫øt s·∫£n ph·∫©m ch√≠nh h√£ng</p>
                </div>
              </div>
              
              <div className="flex items-start gap-3">
                <RefreshCw size={24} className="text-gray-600 flex-shrink-0" />
                <div>
                  <h3 className="font-medium tracking-wide">ƒê·ªïi tr·∫£ trong 30 ng√†y</h3>
                  <p className="text-sm text-gray-600">Mi·ªÖn ph√≠ ƒë·ªïi tr·∫£ n·∫øu kh√¥ng v·ª´a √Ω</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Product Details Tabs */}
        <div className="mt-20">
          <div className="border-b border-gray-200">
            <div className="flex gap-8">
              {['description', 'details', 'reviews'].map((tab) => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`
                    pb-4 tracking-widest uppercase text-sm font-medium
                    transition-colors relative
                    ${activeTab === tab ? 'text-black' : 'text-gray-500 hover:text-black'}
                  `}
                >
                  {tab === 'description' && 'M√¥ t·∫£'}
                  {tab === 'details' && 'Chi ti·∫øt'}
                  {tab === 'reviews' && 'ƒê√°nh gi√°'}
                  
                  {activeTab === tab && (
                    <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-black"></div>
                  )}
                </button>
              ))}
            </div>
          </div>

          <div className="py-8">
            {activeTab === 'description' && (
              <div className="prose max-w-none">
                <p className="text-gray-700 leading-relaxed mb-4">
                  S·∫£n ph·∫©m thu·ªôc b·ªô s∆∞u t·∫≠p m·ªõi nh·∫•t c·ªßa DIOR, ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi s·ª± t·ªâ m·ªâ 
                  v√† ch√∫ √Ω ƒë·∫øn t·ª´ng chi ti·∫øt nh·ªè nh·∫•t. Ch·∫•t li·ªáu cao c·∫•p ƒë∆∞·ª£c tuy·ªÉn ch·ªçn k·ªπ l∆∞·ª°ng 
                  ƒë·∫£m b·∫£o ƒë·ªô b·ªÅn v√† s·ª± tho·∫£i m√°i tuy·ªát ƒë·ªëi.
                </p>
                <p className="text-gray-700 leading-relaxed">
                  Thi·∫øt k·∫ø sang tr·ªçng, thanh l·ªãch ph√π h·ª£p cho m·ªçi d·ªãp t·ª´ c√¥ng s·ªü ƒë·∫øn d·ª± ti·ªác. 
                  ƒê√¢y l√† s·ª± l·ª±a ch·ªçn ho√†n h·∫£o cho nh·ªØng ai y√™u th√≠ch phong c√°ch th·ªùi trang 
                  ƒë·∫≥ng c·∫•p v√† tinh t·∫ø.
                </p>
              </div>
            )}

            {activeTab === 'details' && (
              <div className="space-y-3">
                <div className="flex py-3 border-b">
                  <span className="w-40 text-gray-600">Ch·∫•t li·ªáu:</span>
                  <span className="font-medium">Cotton cao c·∫•p</span>
                </div>
                <div className="flex py-3 border-b">
                  <span className="w-40 text-gray-600">Xu·∫•t x·ª©:</span>
                  <span className="font-medium">Ph√°p</span>
                </div>
                <div className="flex py-3 border-b">
                  <span className="w-40 text-gray-600">H∆∞·ªõng d·∫´n gi·∫∑t:</span>
                  <span className="font-medium">Gi·∫∑t tay, kh√¥ng d√πng m√°y s·∫•y</span>
                </div>
                <div className="flex py-3 border-b">
                  <span className="w-40 text-gray-600">M√†u s·∫Øc:</span>
                  <span className="font-medium">ƒêen</span>
                </div>
              </div>
            )}

            {activeTab === 'reviews' && (
              <div className="space-y-6">
                <div className="flex items-center gap-4 pb-6 border-b">
                  <div className="text-center">
                    <div className="text-5xl font-light">5.0</div>
                    <div className="flex justify-center mt-2">
                      {[1, 2, 3, 4, 5].map((star) => (
                        <Star key={star} size={16} className="fill-black text-black" />
                      ))}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">248 ƒë√°nh gi√°</div>
                  </div>
                  <button className="ml-auto px-6 py-3 border-2 border-black rounded-lg hover:bg-black hover:text-white transition-colors tracking-wide">
                    Vi·∫øt ƒë√°nh gi√°
                  </button>
                </div>

                {[1, 2, 3].map((review) => (
                  <div key={review} className="border-b pb-6">
                    <div className="flex items-center gap-2 mb-2">
                      {[1, 2, 3, 4, 5].map((star) => (
                        <Star key={star} size={14} className="fill-black text-black" />
                      ))}
                    </div>
                    <h4 className="font-medium mb-1">S·∫£n ph·∫©m tuy·ªát v·ªùi</h4>
                    <p className="text-sm text-gray-600 mb-2">
                      Ch·∫•t l∆∞·ª£ng t·ªët, ƒë√∫ng nh∆∞ m√¥ t·∫£. R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y.
                    </p>
                    <div className="text-sm text-gray-500">
                      Nguy·ªÖn VƒÉn A ‚Ä¢ 15/01/2025
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductDetailPage;