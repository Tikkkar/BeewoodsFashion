import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ShoppingCart, Heart, Share2, ChevronLeft, Star, Truck, Shield, RefreshCw, Check, ChevronRight, Ruler, X } from 'lucide-react';
import ProductCard from '../components/products/ProductCard';

const ProductDetailPage = ({ products, onAddToCart, brand }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [product, setProduct] = useState(null);
  const [selectedSize, setSelectedSize] = useState('');
  const [quantity, setQuantity] = useState(1);
  const [activeTab, setActiveTab] = useState('description');
  const [selectedImage, setSelectedImage] = useState(0);
  const [showSizeGuide, setShowSizeGuide] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);

  // Wishlist state
  const [wishlist, setWishlist] = useState(() => {
    try {
      const saved = localStorage.getItem('dior_wishlist');
      return saved ? JSON.parse(saved) : [];
    } catch {
      return [];
    }
  });

  const [isWishlisted, setIsWishlisted] = useState(false);

  // Find product and related products
  useEffect(() => {
    const foundProduct = products.find(p => p.id === parseInt(id));
    if (foundProduct) {
      setProduct(foundProduct);
      setSelectedImage(0);
      setImageLoaded(false);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    } else {
      navigate('/');
    }
  }, [id, products, navigate]);

  // Check wishlist status
  useEffect(() => {
    if (product) {
      setIsWishlisted(wishlist.some(item => item.id === product.id));
    }
  }, [product, wishlist]);

  // Get related products (same category)
  const relatedProducts = product
    ? products.filter(p => p.category === product.category && p.id !== product.id).slice(0, 4)
    : [];

  // Product images (mock multiple images for story)
  const productImages = product ? [
    product.image,
    product.image, // Placeholder for lifestyle
    product.image, // Placeholder for detail close-up
    product.image  // Placeholder for styling
  ] : [];

  // Toggle wishlist
  const handleToggleWishlist = () => {
    let newWishlist;
    
    if (isWishlisted) {
      newWishlist = wishlist.filter(item => item.id !== product.id);
    } else {
      newWishlist = [...wishlist, product];
    }
    
    setWishlist(newWishlist);
    setIsWishlisted(!isWishlisted);
    localStorage.setItem('dior_wishlist', JSON.stringify(newWishlist));
    window.dispatchEvent(new Event('wishlistUpdated'));
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const handleAddToCart = () => {
    if (!selectedSize) {
      alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn size!');
      return;
    }
    onAddToCart({
      ...product,
      size: selectedSize,
      quantity: quantity
    });
  };

  const handleShare = async () => {
    const shareData = {
      title: product.name,
      text: `Xem s·∫£n ph·∫©m ${product.name}`,
      url: window.location.href
    };

    try {
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        await navigator.clipboard.writeText(window.location.href);
        alert('üìã ƒê√£ copy link s·∫£n ph·∫©m!');
      }
    } catch (err) {
      console.log('Error sharing:', err);
    }
  };

  const sizes = ['XS', 'S', 'M', 'L', 'XL'];

  if (!product) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-4 border-gray-200 border-t-black mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang t·∫£i...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      
      {/* Breadcrumb */}
      <div className="border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex items-center gap-2 text-sm">
            <Link to="/" className="text-gray-500 hover:text-black transition">
              Trang ch·ªß
            </Link>
            <ChevronRight size={14} className="text-gray-400" />
            <Link to="/products" className="text-gray-500 hover:text-black transition">
              S·∫£n ph·∫©m
            </Link>
            <ChevronRight size={14} className="text-gray-400" />
            <span className="text-gray-900 font-medium line-clamp-1">{product.name}</span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-8 md:py-12">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12">
          
          {/* ========== START: MODIFIED IMAGE AREA ========== */}
          {/* Left: Images */}
          <div className="flex flex-col-reverse md:flex-row gap-4">
            {/* Thumbnail Gallery (Vertical) */}
            <div className="flex md:flex-col gap-3 w-full md:w-24">
              {productImages.map((img, index) => (
                <button
                  key={index}
                  onClick={() => setSelectedImage(index)}
                  className={`aspect-square rounded-lg overflow-hidden border-2 transition-all w-1/4 md:w-full ${
                    selectedImage === index
                      ? 'border-black shadow-md'
                      : 'border-gray-200 hover:border-gray-400'
                  }`}
                >
                  <img
                    src={img}
                    alt={`${product.name} ${index + 1}`}
                    className="w-full h-full object-cover"
                  />
                </button>
              ))}
            </div>

            {/* Main Image */}
            <div className="flex-1 relative aspect-[3/4] bg-gray-100 rounded-lg overflow-hidden group">
              {!imageLoaded && (
                <div className="absolute inset-0 bg-gray-200 animate-pulse" />
              )}
              <img
                src={productImages[selectedImage]}
                alt={product.name}
                className={`w-full h-full object-cover transition-opacity duration-300 ${
                  imageLoaded ? 'opacity-100' : 'opacity-0'
                }`}
                onLoad={() => setImageLoaded(true)}
              />
              
              {/* Sale Badge */}
              {product.discount && (
                <div className="absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                  -{product.discount}%
                </div>
              )}

              {/* Image Navigation */}
              {productImages.length > 1 && (
                <div className="absolute inset-x-4 top-1/2 -translate-y-1/2 flex justify-between opacity-0 group-hover:opacity-100 transition-opacity">
                  <button
                    onClick={() => setSelectedImage((prev) => (prev - 1 + productImages.length) % productImages.length)}
                    className="p-2 bg-white/90 hover:bg-white rounded-full shadow-lg transition"
                  >
                    <ChevronLeft size={20} />
                  </button>
                  <button
                    onClick={() => setSelectedImage((prev) => (prev + 1) % productImages.length)}
                    className="p-2 bg-white/90 hover:bg-white rounded-full shadow-lg transition"
                  >
                    <ChevronRight size={20} />
                  </button>
                </div>
              )}
            </div>
          </div>
          {/* ========== END: MODIFIED IMAGE AREA ========== */}


          {/* Right: Product Info */}
          <div className="space-y-6">
            
            {/* Category */}
            <div className="text-xs uppercase tracking-widest text-gray-500">
              {product.category}
            </div>

            {/* Product Name */}
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900">
              {product.name}
            </h1>

            {/* Rating */}
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-1">
                {[...Array(5)].map((_, i) => (
                  <Star key={i} size={16} className="fill-yellow-400 text-yellow-400" />
                ))}
              </div>
              <span className="text-sm text-gray-600">(248 ƒë√°nh gi√°)</span>
              <span className="text-sm text-green-600 font-medium">‚Ä¢ C√≤n h√†ng</span>
            </div>

            {/* Price */}
            <div className="flex items-baseline gap-3">
              <span className="text-3xl font-bold text-black">
                {formatPrice(product.price)}
              </span>
              {product.originalPrice && (
                <span className="text-lg text-gray-400 line-through">
                  {formatPrice(product.originalPrice)}
                </span>
              )}
            </div>

            {/* Description */}
            <p className="text-gray-700 leading-relaxed text-sm">
              S·∫£n ph·∫©m cao c·∫•p t·ª´ b·ªô s∆∞u t·∫≠p m·ªõi nh·∫•t. Thi·∫øt k·∫ø tinh t·∫ø, ch·∫•t li·ªáu cao c·∫•p, 
              mang ƒë·∫øn s·ª± sang tr·ªçng v√† ƒë·∫≥ng c·∫•p cho ng∆∞·ªùi s·ª≠ d·ª•ng. Ph√π h·ª£p cho m·ªçi d·ªãp t·ª´ 
              c√¥ng s·ªü ƒë·∫øn d·ª± ti·ªác.
            </p>

            <div className="border-t pt-6 space-y-5">
              
              {/* Size Selection */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <label className="text-sm font-semibold uppercase tracking-wide">
                    Ch·ªçn Size
                  </label>
                  <button 
                    onClick={() => setShowSizeGuide(true)}
                    className="text-sm text-gray-600 hover:text-black underline flex items-center gap-1"
                  >
                    <Ruler size={14} />
                    H∆∞·ªõng d·∫´n ch·ªçn size
                  </button>
                </div>
                <div className="grid grid-cols-5 gap-2">
                  {sizes.map((size) => (
                    <button
                      key={size}
                      onClick={() => setSelectedSize(size)}
                      className={`py-3 rounded-lg border-2 font-medium text-sm transition-all ${
                        selectedSize === size
                          ? 'border-black bg-black text-white'
                          : 'border-gray-300 hover:border-black'
                      }`}
                    >
                      {size}
                    </button>
                  ))}
                </div>
              </div>

              {/* Quantity */}
              <div className="space-y-3">
                <label className="text-sm font-semibold uppercase tracking-wide">
                  S·ªë l∆∞·ª£ng
                </label>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setQuantity(Math.max(1, quantity - 1))}
                    className="w-10 h-10 border-2 border-gray-300 rounded-lg hover:border-black transition flex items-center justify-center font-bold"
                  >
                    -
                  </button>
                  <input
                    type="number"
                    value={quantity}
                    onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}
                    className="w-16 h-10 text-center border-2 border-gray-300 rounded-lg focus:border-black focus:outline-none"
                  />
                  <button
                    onClick={() => setQuantity(quantity + 1)}
                    className="w-10 h-10 border-2 border-gray-300 rounded-lg hover:border-black transition flex items-center justify-center font-bold"
                  >
                    +
                  </button>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="space-y-3 pt-4">
                <button
                  onClick={handleAddToCart}
                  className="w-full bg-black text-white py-4 rounded-lg font-semibold uppercase tracking-wide hover:bg-gray-800 transition flex items-center justify-center gap-2"
                >
                  <ShoppingCart size={20} />
                  Th√™m v√†o gi·ªè h√†ng
                </button>
                
                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={handleToggleWishlist}
                    className={`py-3 rounded-lg border-2 font-medium transition flex items-center justify-center gap-2 ${
                      isWishlisted
                        ? 'border-red-500 text-red-500 bg-red-50'
                        : 'border-gray-300 hover:border-black'
                    }`}
                  >
                    <Heart size={18} fill={isWishlisted ? 'currentColor' : 'none'} />
                    <span className="text-sm">{isWishlisted ? 'ƒê√£ th√≠ch' : 'Y√™u th√≠ch'}</span>
                  </button>
                  
                  <button 
                    onClick={handleShare}
                    className="py-3 rounded-lg border-2 border-gray-300 hover:border-black transition font-medium flex items-center justify-center gap-2"
                  >
                    <Share2 size={18} />
                    <span className="text-sm">Chia s·∫ª</span>
                  </button>
                </div>
              </div>
            </div>

            {/* Features */}
            <div className="border-t pt-6 space-y-4">
              <div className="flex items-start gap-3 text-sm">
                <div className="p-2 bg-gray-100 rounded-lg">
                  <Truck size={20} className="text-gray-700" />
                </div>
                <div>
                  <h3 className="font-semibold mb-1">Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn</h3>
                  <p className="text-gray-600">ƒê∆°n h√†ng t·ª´ 2 s·∫£n ph·∫©m - Giao to√†n qu·ªëc</p>
                </div>
              </div>
              
              <div className="flex items-start gap-3 text-sm">
                <div className="p-2 bg-gray-100 rounded-lg">
                  <Shield size={20} className="text-gray-700" />
                </div>
                <div>
                  <h3 className="font-semibold mb-1">Ch√≠nh h√£ng 100%</h3>
                  <p className="text-gray-600">Cam k·∫øt s·∫£n ph·∫©m ch√≠nh h√£ng, ch·∫•t l∆∞·ª£ng</p>
                </div>
              </div>
              
              <div className="flex items-start gap-3 text-sm">
                <div className="p-2 bg-gray-100 rounded-lg">
                  <RefreshCw size={20} className="text-gray-700" />
                </div>
                <div>
                  <h3 className="font-semibold mb-1">ƒê·ªïi tr·∫£ d·ªÖ d√†ng</h3>
                  <p className="text-gray-600">ƒê·ªïi tr·∫£ trong 30 ng√†y n·∫øu kh√¥ng v·ª´a √Ω</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs Section */}
        <div className="mt-16 md:mt-20">
          <div className="border-b border-gray-200">
            <div className="flex gap-6 md:gap-8 overflow-x-auto scrollbar-hide">
              {[
                { id: 'description', label: 'M√¥ t·∫£ s·∫£n ph·∫©m' },
                { id: 'details', label: 'Th√¥ng tin chi ti·∫øt' },
                { id: 'reviews', label: 'ƒê√°nh gi√° (248)' }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`pb-4 text-sm md:text-base font-medium whitespace-nowrap transition-colors relative ${
                    activeTab === tab.id ? 'text-black' : 'text-gray-500 hover:text-black'
                  }`}
                >
                  {tab.label}
                  {activeTab === tab.id && (
                    <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-black"></div>
                  )}
                </button>
              ))}
            </div>
          </div>

          <div className="py-8">
            {activeTab === 'description' && (
              <div className="max-w-3xl mx-auto prose prose-sm lg:prose-base text-gray-700 leading-relaxed">
                {/* üìù Text 1 (Intro) */}
                <p className="text-lg text-center italic">
                  Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi th·∫ø gi·ªõi c·ªßa s·ª± thanh l·ªãch v√† tinh t·∫ø. <strong>{product.name}</strong> kh√¥ng ch·ªâ l√† m·ªôt s·∫£n ph·∫©m, m√† l√† m·ªôt tuy√™n ng√¥n v·ªÅ phong c√°ch.
                </p>

                {/* üì∑ Image 1 (Main lifestyle) */}
                <figure>
                  <img src={productImages[1]} alt={`Lifestyle image for ${product.name}`} className="rounded-lg shadow-md" />
                  <figcaption>Phong c√°ch s·ªëng ƒë·ªông c√πng {product.name}</figcaption>
                </figure>

                {/* üìù Text 2 (Feature 1) */}
                <h3>Ch·∫•t li·ªáu V∆∞·ª£t tr·ªôi</h3>
                <p>
                  Ch√∫ng t√¥i tin r·∫±ng s·ª± sang tr·ªçng ƒë·∫øn t·ª´ nh·ªØng ƒëi·ªÅu c∆° b·∫£n nh·∫•t. ƒê√≥ l√† l√Ω do s·∫£n ph·∫©m n√†y ƒë∆∞·ª£c ch·∫ø t√°c t·ª´ ch·∫•t li·ªáu Cotton cao c·∫•p, pha th√™m spandex ƒë·ªÉ t·∫°o n√™n s·ª± co gi√£n v√† tho·∫£i m√°i tuy·ªát ƒë·ªëi. B·ªÅ m·∫∑t v·∫£i m·ªÅm m·∫°i, tho√°ng kh√≠, mang l·∫°i c·∫£m gi√°c d·ªÖ ch·ªãu su·ªët c·∫£ ng√†y.
                </p>

                {/* üì∑ Image 2 (Detail close-up) */}
                <figure>
                  <img src={productImages[2]} alt={`Close-up detail of ${product.name}`} className="rounded-lg shadow-md" />
                  <figcaption>T·ª´ng ƒë∆∞·ªùng kim m≈©i ch·ªâ ƒë∆∞·ª£c chƒÉm ch√∫t t·ªâ m·ªâ</figcaption>
                </figure>

                {/* üìù Text 3 (Feature 2 + Bullet points) */}
                <h3>Thi·∫øt k·∫ø T√¥n vinh V√≥c d√°ng</h3>
                <p>
                  M·ªói ƒë∆∞·ªùng c·∫Øt may tr√™n <strong>{product.name}</strong> ƒë·ªÅu ƒë∆∞·ª£c t√≠nh to√°n k·ªπ l∆∞·ª°ng ƒë·ªÉ t√¥n l√™n v√≥c d√°ng ng∆∞·ªùi m·∫∑c. Form d√°ng chu·∫©n, √¥m v·ª´a v·∫∑n nh∆∞ng kh√¥ng g√¢y kh√≥ ch·ªãu, gi√∫p b·∫°n lu√¥n t·ª± tin v√† n·ªïi b·∫≠t.
                </p>
                <ul>
                    <li>Form d√°ng hi·ªán ƒë·∫°i, d·ªÖ d√†ng ph·ªëi ƒë·ªì.</li>
                    <li>M√†u s·∫Øc b·ªÅn ƒë·∫πp, kh√¥ng phai sau nhi·ªÅu l·∫ßn gi·∫∑t.</li>
                    <li>Ph√π h·ª£p cho m·ªçi ho·∫°t ƒë·ªông: ƒëi l√†m, d·∫°o ph·ªë, hay nh·ªØng bu·ªïi ti·ªác nh·∫π.</li>
                </ul>
                
                {/* üì∑ Image 3 (Styling inspiration) */}
                <figure>
                  <img src={productImages[3]} alt={`Styling inspiration for ${product.name}`} className="rounded-lg shadow-md" />
                  <figcaption>D·ªÖ d√†ng t·∫°o n√™n b·ªô trang ph·ª•c ho√†n h·∫£o</figcaption>
                </figure>
                
                {/* üìù Text 4 (Closing + Quote) */}
                <div className="text-center border-t border-b py-6 my-8 not-prose">
                  <p className="mb-4 text-gray-700">
                    H√£y ƒë·ªÉ <strong>{product.name}</strong> tr·ªü th√†nh ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh, gi√∫p b·∫°n k·ªÉ n√™n c√¢u chuy·ªán phong c√°ch c·ªßa ri√™ng m√¨nh.
                  </p>
                  <p className="font-semibold text-gray-900 text-base">
                    "Th·ªùi trang l√† c√°ch b·∫°n th·ªÉ hi·ªán m√¨nh m√† kh√¥ng c·∫ßn ph·∫£i n√≥i m·ªôt l·ªùi."
                  </p>
                </div>
              </div>
            )}

            {activeTab === 'details' && (
              <div className="max-w-3xl">
                <div className="space-y-3">
                  {[
                    { label: 'Ch·∫•t li·ªáu', value: 'Cotton cao c·∫•p, pha spandex' },
                    { label: 'Xu·∫•t x·ª©', value: 'Vi·ªát Nam' },
                    { label: 'M√†u s·∫Øc', value: 'ƒêen' },
                    { label: 'Size', value: 'XS, S, M, L, XL' },
                    { label: 'H∆∞·ªõng d·∫´n gi·∫∑t', value: 'Gi·∫∑t tay ho·∫∑c m√°y gi·∫∑t ·ªü ch·∫ø ƒë·ªô nh·∫π, kh√¥ng d√πng n∆∞·ªõc n√≥ng' },
                    { label: 'H∆∞·ªõng d·∫´n b·∫£o qu·∫£n', value: 'Ph∆°i ·ªü n∆°i tho√°ng m√°t, tr√°nh √°nh n·∫Øng tr·ª±c ti·∫øp' },
                    { label: 'Th∆∞∆°ng hi·ªáu', value: brand?.name || 'DIOR STORE' }
                  ].map((item, index) => (
                    <div key={index} className="flex py-3 border-b last:border-0 text-sm">
                      <span className="w-40 text-gray-600 font-medium">{item.label}:</span>
                      <span className="flex-1 text-gray-900">{item.value}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeTab === 'reviews' && (
              <div className="max-w-3xl space-y-6">
                {/* Rating Summary */}
                <div className="flex flex-col md:flex-row items-start md:items-center gap-6 p-6 bg-gray-50 rounded-lg">
                  <div className="text-center">
                    <div className="text-5xl font-bold mb-2">5.0</div>
                    <div className="flex justify-center mb-2">
                      {[...Array(5)].map((_, i) => (
                        <Star key={i} size={18} className="fill-yellow-400 text-yellow-400" />
                      ))}
                    </div>
                    <div className="text-sm text-gray-600">248 ƒë√°nh gi√°</div>
                  </div>
                  
                  <div className="flex-1 space-y-2 w-full">
                    {[5, 4, 3, 2, 1].map((rating) => (
                      <div key={rating} className="flex items-center gap-3">
                        <span className="text-sm text-gray-600 w-8">{rating} ‚òÖ</span>
                        <div className="flex-1 h-2 bg-gray-200 rounded-full overflow-hidden">
                          <div 
                            className="h-full bg-yellow-400" 
                            style={{ width: rating === 5 ? '90%' : rating === 4 ? '8%' : '2%' }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-600 w-12 text-right">
                          {rating === 5 ? '223' : rating === 4 ? '20' : '5'}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Review Form */}
                <div className="border-t pt-6">
                  <button className="w-full md:w-auto px-6 py-3 border-2 border-black rounded-lg hover:bg-black hover:text-white transition font-medium">
                    Vi·∫øt ƒë√°nh gi√° c·ªßa b·∫°n
                  </button>
                </div>

                {/* Reviews List */}
                <div className="space-y-6">
                  {[
                    { name: 'Nguy·ªÖn Thu H√†', date: '15/01/2025', comment: 'S·∫£n ph·∫©m r·∫•t ƒë·∫πp, ch·∫•t l∆∞·ª£ng t·ªët. Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n. S·∫Ω ·ªßng h·ªô shop ti·∫øp!', verified: true },
                    { name: 'Ph·∫°m Mai Anh', date: '12/01/2025', comment: 'Thi·∫øt k·∫ø sang tr·ªçng, form d√°ng chu·∫©n. M·∫∑c r·∫•t tho·∫£i m√°i v√† ƒë·∫πp. Gi√° c·∫£ h·ª£p l√Ω!', verified: true },
                    { name: 'Tr·∫ßn Minh Ch√¢u', date: '10/01/2025', comment: 'Ch·∫•t li·ªáu m·ªÅm m·∫°i, tho√°ng m√°t. Size v·ª´a v·∫∑n nh∆∞ m√¥ t·∫£. R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y.', verified: false }
                  ].map((review, index) => (
                    <div key={index} className="border-b pb-6 last:border-0">
                      <div className="flex items-start gap-3 mb-3">
                        <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center font-semibold text-gray-600">
                          {review.name.charAt(0)}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-semibold">{review.name}</h4>
                            {review.verified && (
                              <span className="text-xs bg-green-100 text-green-700 px-2 py-0.5 rounded-full">
                                ‚úì ƒê√£ mua h√†ng
                              </span>
                            )}
                          </div>
                          <div className="flex items-center gap-2 mb-2">
                            <div className="flex">
                              {[...Array(5)].map((_, i) => (
                                <Star key={i} size={14} className="fill-yellow-400 text-yellow-400" />
                              ))}
                            </div>
                            <span className="text-xs text-gray-500">{review.date}</span>
                          </div>
                          <p className="text-sm text-gray-700">{review.comment}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Load More */}
                <div className="text-center pt-4">
                  <button className="text-sm text-gray-600 hover:text-black underline">
                    Xem th√™m ƒë√°nh gi√°
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Related Products */}
        {relatedProducts.length > 0 && (
          <div className="mt-16 md:mt-20 border-t pt-12">
            <h2 className="text-2xl md:text-3xl font-bold mb-8 text-center">
              S·∫£n Ph·∫©m Li√™n Quan
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6">
              {relatedProducts.map((relatedProduct) => (
                <ProductCard
                  key={relatedProduct.id}
                  product={relatedProduct}
                  onAddToCart={onAddToCart}
                />
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Size Guide Modal */}
      {showSizeGuide && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4" onClick={() => setShowSizeGuide(false)}>
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <div className="sticky top-0 bg-white border-b p-4 flex items-center justify-between">
              <h3 className="text-lg font-bold">H∆∞·ªõng D·∫´n Ch·ªçn Size</h3>
              <button onClick={() => setShowSizeGuide(false)} className="p-1 hover:bg-gray-100 rounded">
                <X size={20} />
              </button>
            </div>
            <div className="p-6">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b">
                    <th className="py-2 text-left">Size</th>
                    <th className="py-2 text-center">Vai (cm)</th>
                    <th className="py-2 text-center">Ng·ª±c (cm)</th>
                    <th className="py-2 text-center">Eo (cm)</th>
                    <th className="py-2 text-center">D√†i (cm)</th>
                  </tr>
                </thead>
                <tbody>
                  {[
                    { size: 'XS', shoulder: '36', chest: '80-84', waist: '60-64', length: '60' },
                    { size: 'S', shoulder: '38', chest: '84-88', waist: '64-68', length: '62' },
                    { size: 'M', shoulder: '40', chest: '88-92', waist: '68-72', length: '64' },
                    { size: 'L', shoulder: '42', chest: '92-96', waist: '72-76', length: '66' },
                    { size: 'XL', shoulder: '44', chest: '96-100', waist: '76-80', length: '68' }
                  ].map((row) => (
                    <tr key={row.size} className="border-b">
                      <td className="py-3 font-semibold">{row.size}</td>
                      <td className="py-3 text-center">{row.shoulder}</td>
                      <td className="py-3 text-center">{row.chest}</td>
                      <td className="py-3 text-center">{row.waist}</td>
                      <td className="py-3 text-center">{row.length}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                <h4 className="font-semibold mb-2">üí° G·ª£i √Ω ch·ªçn size:</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  <li>‚Ä¢ ƒêo c√°c s·ªë ƒëo c∆° th·ªÉ tr∆∞·ªõc khi ch·ªçn size</li>
                  <li>‚Ä¢ N·∫øu b·∫°n ƒëang ·ªü gi·ªØa 2 size, h√£y ch·ªçn size l·ªõn h∆°n</li>
                  <li>‚Ä¢ Li√™n h·ªá hotline n·∫øu c·∫ßn t∆∞ v·∫•n th√™m: 0983.918.411</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductDetailPage;