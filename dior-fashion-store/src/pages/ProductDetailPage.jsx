
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ShoppingCart, Heart, Share2, ChevronLeft, Star, Check, ChevronRight, Ruler, X, Package, Loader2 } from 'lucide-react';
import ProductCard from '../components/products/ProductCard';
import { useProductDetail, useProducts } from '../hooks/useProducts';
import sizeGuideImage from '../assets/size.jpg';

const ProductDetailPage = ({ onAddToCart, brand }) => {
  const { slug } = useParams();
  const navigate = useNavigate();
  
  // =============================================
  // DATA FETCHING
  // =============================================
  const { product, loading, error } = useProductDetail(slug);
  const { products: allProducts } = useProducts({
    category: product?.categorySlug
  });
  
  // L·∫•y s·∫£n ph·∫©m li√™n quan (c√πng danh m·ª•c, tr·ª´ s·∫£n ph·∫©m hi·ªán t·∫°i)
  const relatedProducts = product && allProducts
    ? allProducts.filter(p => p.id !== product.id).slice(0, 4)
    : [];

  // =============================================
  // LOCAL STATES
  // =============================================
  const [selectedSize, setSelectedSize] = useState('');
  const [quantity, setQuantity] = useState(1);
  const [activeTab, setActiveTab] = useState('reviews'); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã reviews
  const [selectedImage, setSelectedImage] = useState(0);
  const [showSizeGuide, setShowSizeGuide] = useState(false);
  const [showShippingPolicy, setShowShippingPolicy] = useState(false);
  
  // State qu·∫£n l√Ω danh s√°ch y√™u th√≠ch
  const [wishlist, setWishlist] = useState(() => {
    try {
      const saved = localStorage.getItem('dior_wishlist');
      return saved ? JSON.parse(saved) : [];
    } catch {
      return [];
    }
  });
  const [isWishlisted, setIsWishlisted] = useState(false);

  // =============================================
  // EFFECTS
  // =============================================
  // Reset state khi s·∫£n ph·∫©m thay ƒë·ªïi
  useEffect(() => {
    if (product) {
      console.group('üîç PRODUCT DETAIL PAGE DEBUG');
      console.log('1. Product name:', product.name);
      console.log('2. Has attributes?', !!product.attributes);
      console.log('3. Attributes type:', typeof product.attributes);
      console.log('4. Attributes value:', product.attributes);
      console.log('5. Content blocks:', product.attributes?.content_blocks);
      console.log('6. Is array?', Array.isArray(product.attributes?.content_blocks));
      console.log('7. Length:', product.attributes?.content_blocks?.length);
      
      const hasContent = 
        product.attributes?.content_blocks && 
        Array.isArray(product.attributes.content_blocks) &&
        product.attributes.content_blocks.length > 0;
      
      console.log('8. ‚úÖ Should render custom?', hasContent);
      console.groupEnd();
    }
  }, [product]);

  // Ki·ªÉm tra tr·∫°ng th√°i y√™u th√≠ch
  useEffect(() => {
    if (product) {
      setIsWishlisted(wishlist.some(item => item.id === product.id));
    }
  }, [product, wishlist]);

  // =============================================
  // DERIVED STATE (TR·∫†NG TH√ÅI SUY RA)
  // =============================================
  // Logic l·∫•y danh s√°ch ·∫£nh an to√†n
  const productImages = (product?.images && product.images.length > 0)
    ? product.images
    : (product?.image ? [product.image] : []);
    
  // L·∫•y danh s√°ch sizes
  const sizes = product?.sizes 
    ? product.sizes.map(s => typeof s === 'object' ? s.size : s)
    : [];

  // T√≠nh to√°n rating trung b√¨nh
  const averageRating = product?.reviews && product.reviews.length > 0
    ? (product.reviews.reduce((sum, r) => sum + r.rating, 0) / product.reviews.length).toFixed(1)
    : '5.0';

  // =============================================
  // HANDLERS
  // =============================================
  const handleToggleWishlist = () => {
    let newWishlist;
    if (isWishlisted) {
      newWishlist = wishlist.filter(item => item.id !== product.id);
    } else {
      newWishlist = [...wishlist, product];
    }
    setWishlist(newWishlist);
    setIsWishlisted(!isWishlisted);
    localStorage.setItem('dior_wishlist', JSON.stringify(newWishlist));
    window.dispatchEvent(new Event('wishlistUpdated'));
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const handleAddToCart = () => {
    if (!selectedSize) {
      alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn size!');
      return;
    }
    for (let i = 0; i < quantity; i++) {
      onAddToCart(product, selectedSize);
    }
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    alert('‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!');
  };

  // H√ÄM M·ªöI: X·ª≠ l√Ω mua ngay - chuy·ªÉn ƒë·∫øn trang thanh to√°n
  const handleBuyNow = () => {
    if (!selectedSize) {
      alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn size!');
      return;
    }

    // T·∫°o ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªÉ chuy·ªÉn ƒë·∫øn checkout
    const checkoutProduct = {
      ...product,
      selectedSize,
      quantity,
      totalPrice: product.price * quantity
    };

    // L∆∞u th√¥ng tin s·∫£n ph·∫©m v√†o localStorage ƒë·ªÉ CheckoutPage c√≥ th·ªÉ ƒë·ªçc
    localStorage.setItem('direct_checkout_product', JSON.stringify(checkoutProduct));
    
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n
    navigate('/checkout');
  };

  const handleShare = async () => {
    const shareData = {
      title: product.name,
      text: `Xem s·∫£n ph·∫©m ${product.name}`,
      url: window.location.href
    };
    try {
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        await navigator.clipboard.writeText(window.location.href);
        alert('üìã ƒê√£ copy link s·∫£n ph·∫©m!');
      }
    } catch (err) {
      console.log('Error sharing:', err);
    }
  };

  // =============================================
  // COMPONENTS
  // =============================================
  // Component hi·ªÉn th·ªã ph·∫ßn ƒë√°nh gi√°
  const ReviewsSection = () => (
    <div className="space-y-6">
      {/* Rating Summary */}
      <div className="flex flex-col md:flex-row items-start md:items-center gap-6 p-4 md:p-6 bg-gray-50 rounded-lg">
        <div className="text-center w-full md:w-auto">
          <div className="text-4xl md:text-5xl font-bold mb-2">
            {averageRating}
          </div>
          <div className="flex justify-center mb-2">
            {[...Array(5)].map((_, i) => (
              <Star 
                key={i} 
                size={16} 
                className={`${i < Math.floor(parseFloat(averageRating)) ? 'fill-yellow-400 text-yellow-400' : 'fill-gray-300 text-gray-300'}`} 
              />
            ))}
          </div>
          <div className="text-sm text-gray-600">{product.reviews?.length || 0} ƒë√°nh gi√°</div>
        </div>
        
        <div className="flex-1 space-y-2 w-full">
          {[5, 4, 3, 2, 1].map((rating) => {
            const count = product.reviews?.filter(r => r.rating === rating).length || 0;
            const percentage = product.reviews?.length ? (count / product.reviews.length) * 100 : 0;
            return (
              <div key={rating} className="flex items-center gap-3">
                <span className="text-sm text-gray-600 w-6 md:w-8">{rating} ‚òÖ</span>
                <div className="flex-1 h-2 bg-gray-200 rounded-full overflow-hidden">
                  <div className="h-full bg-yellow-400" style={{ width: `${percentage}%` }}></div>
                </div>
                <span className="text-sm text-gray-600 w-8 md:w-12 text-right">{count}</span>
              </div>
            );
          })}
        </div>
      </div>

      {/* Reviews List */}
      {product.reviews && product.reviews.length > 0 ? (
        <div className="space-y-4 md:space-y-6">
          {product.reviews.map((review) => (
            <div key={review.id} className="border-b pb-4 md:pb-6 last:border-0">
              <div className="flex items-start gap-3">
                <div className="w-8 h-8 md:w-10 md:h-10 bg-gray-200 rounded-full flex items-center justify-center font-semibold text-gray-600 text-sm md:text-base">
                  {review.user_id ? 'U' : '?'}
                </div>
                <div className="flex-1">
                  <div className="flex flex-col md:flex-row md:items-center gap-1 md:gap-2 mb-1">
                    <h4 className="font-semibold text-sm md:text-base">Kh√°ch h√†ng</h4>
                    {review.is_verified_purchase && (
                      <span className="text-xs bg-green-100 text-green-700 px-2 py-0.5 rounded-full w-fit">
                        ‚úì ƒê√£ mua h√†ng
                      </span>
                    )}
                  </div>
                  <div className="flex items-center gap-2 mb-2">
                    <div className="flex">
                      {[...Array(5)].map((_, i) => (
                        <Star 
                          key={i} 
                          size={12} 
                          className={i < review.rating ? 'fill-yellow-400 text-yellow-400' : 'fill-gray-300 text-gray-300'} 
                        />
                      ))}
                    </div>
                    <span className="text-xs text-gray-500">{new Date(review.created_at).toLocaleDateString('vi-VN')}</span>
                  </div>
                  <p className="text-sm text-gray-700 leading-relaxed">{review.comment}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8 md:py-12 text-gray-500">
          <p className="mb-2 md:mb-4">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</p>
          <p className="text-sm">H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° s·∫£n ph·∫©m n√†y!</p>
        </div>
      )}
      
      {/* Write Review Button */}
      <div className="border-t pt-4 md:pt-6">
        <button className="w-full md:w-auto px-4 md:px-6 py-2 md:py-3 border-2 border-black rounded-lg hover:bg-black hover:text-white transition font-medium text-sm md:text-base">
          Vi·∫øt ƒë√°nh gi√° c·ªßa b·∫°n
        </button>
      </div>
    </div>
  );

  // =============================================
  // RENDER STATES
  // =============================================
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-12 h-12 animate-spin mx-auto mb-4 text-black" />
          <p className="text-gray-600">ƒêang t·∫£i s·∫£n ph·∫©m...</p>
        </div>
      </div>
    );
  }

  if (error || !product) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h2>
          <p className="text-gray-600 mb-6">{error || 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i'}</p>
          <button
            onClick={() => navigate('/products')}
            className="px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 transition"
          >
            Quay l·∫°i trang s·∫£n ph·∫©m
          </button>
        </div>
      </div>
    );
  }

  // =============================================
  // MAIN RENDER
  // =============================================
  return (
    <div className="min-h-screen bg-white">
      
      {/* Free Shipping Banner */}
      <div className="sticky top-0 bg-red-50 border-b border-red-100 z-40">
        <div className="max-w-7xl mx-auto px-4 py-2">
          <p className="text-center text-sm text-red-700">
            üéÅ <strong>Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn</strong> cho ƒë∆°n h√†ng t·ª´ 2 s·∫£n ph·∫©m - √Åp d·ª•ng to√†n qu·ªëc
          </p>
        </div>
      </div>

      {/* Breadcrumb */}
      <div className="border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex items-center gap-2 text-sm">
            <Link to="/" className="text-gray-500 hover:text-black transition">Trang ch·ªß</Link>
<ChevronRight size={14} className="text-gray-400" />
            <Link to="/products" className="text-gray-500 hover:text-black transition">S·∫£n ph·∫©m</Link>
            <ChevronRight size={14} className="text-gray-400" />
            <span className="text-gray-900 font-medium line-clamp-1">{product.name}</span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-6 md:py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8 lg:gap-12">
          
          {/* Left: Images */}
          <div className="flex flex-col-reverse md:flex-row gap-3 md:gap-4">
            {/* Thumbnail Gallery */}
            <div className="flex md:flex-col gap-2 md:gap-3 w-full md:w-20 lg:w-24">
              {productImages.map((img, index) => (
                <button
                  key={index}
                  onClick={() => setSelectedImage(index)}
                  className={`aspect-square rounded-lg overflow-hidden border-2 transition-all w-1/4 md:w-full ${
                    selectedImage === index
                      ? 'border-black shadow-md'
                      : 'border-gray-200 hover:border-gray-400'
                  }`}
                >
                  <img
                    src={img}
                    alt={`${product.name} ${index + 1}`}
                    className="w-full h-full object-cover"
                  />
                </button>
              ))}
            </div>

            {/* Main Image */}
            <div className="flex-1 relative aspect-[3/4] bg-gray-100 rounded-lg overflow-hidden group">
              <img
                key={productImages[selectedImage]}
                src={productImages[selectedImage]}
                alt={product.name}
                className="w-full h-full object-cover transition-all duration-300 group-hover:scale-105"
              />
              
              {product.originalPrice && product.originalPrice > product.price && (
                <div className="absolute top-3 md:top-4 left-3 md:left-4 bg-red-500 text-white px-2 md:px-3 py-1 rounded-full text-xs md:text-sm font-bold">
                  -{Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)}%
                </div>
              )}

              {productImages.length > 1 && (
                <div className="absolute inset-x-3 md:inset-x-4 top-1/2 -translate-y-1/2 flex justify-between opacity-0 group-hover:opacity-100 transition-opacity">
                  <button
                    onClick={() => setSelectedImage((prev) => (prev - 1 + productImages.length) % productImages.length)}
                    className="p-1 md:p-2 bg-white/90 hover:bg-white rounded-full shadow-lg transition"
                  >
                    <ChevronLeft size={16} className="md:w-5 md:h-5" />
                  </button>
                  <button
                    onClick={() => setSelectedImage((prev) => (prev + 1) % productImages.length)}
                    className="p-1 md:p-2 bg-white/90 hover:bg-white rounded-full shadow-lg transition"
                  >
                    <ChevronRight size={16} className="md:w-5 md:h-5" />
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Right: Product Info */}
          <div className="space-y-4 md:space-y-6">
            <h1 className="text-xl md:text-2xl lg:text-3xl font-bold text-gray-900">
              {product.name}
            </h1>

            <div className="flex items-baseline gap-2 md:gap-3">
              <span className="text-2xl md:text-3xl font-bold text-black">
                {formatPrice(product.price)}
              </span>
              {product.originalPrice && product.originalPrice > product.price && (
                <span className="text-base md:text-lg text-gray-400 line-through">
                  {formatPrice(product.originalPrice)}
                </span>
              )}
            </div>

            {/* Reviews Summary - Hi·ªÉn th·ªã ·ªü ƒë·∫ßu trang th√¥ng tin s·∫£n ph·∫©m */}
            <div className="flex items-center gap-2 md:gap-3 p-3 md:p-4 bg-gray-50 rounded-lg">
              <div className="flex items-center gap-1">
                <div className="flex">
                  {[...Array(5)].map((_, i) => (
                    <Star 
                      key={i} 
                      size={14} 
                      className={`${i < Math.floor(parseFloat(averageRating)) ? 'fill-yellow-400 text-yellow-400' : 'fill-gray-300 text-gray-300'}`} 
                    />
                  ))}
                </div>
                <span className="text-sm font-semibold ml-1">{averageRating}</span>
              </div>
              <span className="text-gray-500 text-sm">‚Ä¢</span>
              <button 
                onClick={() => setActiveTab('reviews')}
                className="text-sm text-blue-600 hover:text-blue-800 hover:underline transition"
              >
                {product.reviews?.length || 0} ƒë√°nh gi√°
              </button>
            </div>

            <div className="text-xs md:text-sm text-gray-600">
              M√£ s·∫£n ph·∫©m: <span className="font-medium">SP{product.id.toString().substring(0, 8).toUpperCase()}</span>
            </div>

            <div className="bg-green-50 border border-green-200 rounded-lg p-3 md:p-4">
              <div className="flex items-center gap-2 text-green-700">
                <Package size={16} className="md:w-5 md:h-5" />
                <span className="font-semibold text-sm md:text-base">ƒê∆∞·ª£c ki·ªÉm tra h√†ng tr∆∞·ªõc</span>
              </div>
              <button 
                onClick={() => setShowShippingPolicy(true)}
                className="text-xs md:text-sm text-green-600 hover:text-green-800 underline mt-1"
              >
                Nh·∫•p ƒë·ªÉ xem ch√≠nh s√°ch
              </button>
            </div>

            <p className="text-gray-700 leading-relaxed text-xs md:text-sm border-l-3 md:border-l-4 border-gray-300 pl-3 md:pl-4 italic">
              {product.description || `${product.name} l√† m·ªôt thi·∫øt k·∫ø hi·ªán ƒë·∫°i, tinh gi·∫£n nh∆∞ng ƒë·∫ßy ƒëi·ªÉm nh·∫•n. V·ªõi thi·∫øt k·∫ø sang tr·ªçng, s·∫£n ph·∫©m n√†y kh√¥ng ch·ªâ d·ªÖ ph·ªëi ƒë·ªì m√† c√≤n kh√©o l√©o t√¥n l√™n phong c√°ch c·ªßa ng∆∞·ªùi m·∫∑c.`}
            </p>

            <div className="border-t pt-4 md:pt-6 space-y-4 md:space-y-5">
              <div className="space-y-2 md:space-y-3">
                <div className="flex items-center justify-between">
                  <label className="text-xs md:text-sm font-semibold uppercase tracking-wide">Ch·ªçn Size</label>
                  <button 
                    onClick={() => setShowSizeGuide(true)}
                    className="text-xs md:text-sm text-gray-600 hover:text-black underline flex items-center gap-1"
                  >
                    <Ruler size={12} className="md:w-3 md:h-3" />
                    H∆∞·ªõng d·∫´n ch·ªçn size
                  </button>
                </div>
                <div className="grid grid-cols-4 md:grid-cols-5 gap-2">
                  {sizes.map((size) => (
                    <button
                      key={size}
                      onClick={() => setSelectedSize(size)}
                      className={`py-2 md:py-3 rounded-lg border-2 font-medium text-xs md:text-sm transition-all ${
                        selectedSize === size
                          ? 'border-black bg-black text-white'
                          : 'border-gray-300 hover:border-black'
                      }`}
                    >
                      {size}
                    </button>
                  ))}
                </div>
              </div>

              <div className="space-y-2 md:space-y-3">
                <label className="text-xs md:text-sm font-semibold uppercase tracking-wide">S·ªë l∆∞·ª£ng</label>
                <div className="flex items-center gap-2 md:gap-3">
                  <button
                    onClick={() => setQuantity(Math.max(1, quantity - 1))}
                    className="w-8 h-8 md:w-10 md:h-10 border-2 border-gray-300 rounded-lg hover:border-black transition flex items-center justify-center font-bold text-sm md:text-base"
                  >
                    -
                  </button>
                  <input
                    type="number"
                    value={quantity}
                    onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}
                    className="w-12 md:w-16 h-8 md:h-10 text-center border-2 border-gray-300 rounded-lg focus:border-black focus:outline-none text-sm md:text-base"
                  />
                  <button
                    onClick={() => setQuantity(quantity + 1)}
                    className="w-8 h-8 md:w-10 md:h-10 border-2 border-gray-300 rounded-lg hover:border-black transition flex items-center justify-center font-bold text-sm md:text-base"
                  >
                    +
                  </button>
                </div>
              </div>

              <div className="space-y-2 md:space-y-3 pt-2 md:pt-4">
                {/* N√öT MUA NGAY - CHUY·ªÇN ƒê·∫æN CHECKOUT */}
                <button
                  onClick={handleBuyNow}
                  disabled={product.stock === 0}
                  className={`w-full py-3 md:py-4 rounded-lg font-semibold uppercase tracking-wide transition flex items-center justify-center gap-2 text-sm md:text-base ${
                    product.stock === 0
                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                      : 'bg-black text-white hover:bg-gray-800'
                  }`}
                >
                  <ShoppingCart size={16} className="md:w-5 md:h-5" />
                  {product.stock === 0 ? 'H·∫øt h√†ng' : 'Mua ngay'}
                </button>
                
                <div className="grid grid-cols-2 gap-2 md:gap-3">
                  {/* N√öT TH√äM V√ÄO GI·ªé H√ÄNG */}
                  <button
                    onClick={handleAddToCart}
                    disabled={product.stock === 0}
                    className={`py-2 md:py-3 rounded-lg border-2 font-medium transition flex items-center justify-center gap-2 text-xs md:text-sm ${
                      product.stock === 0
                        ? 'bg-gray-100 text-gray-400 border-gray-300 cursor-not-allowed'
                        : 'border-gray-300 hover:border-black hover:bg-gray-50'
                    }`}
                  >
                    <ShoppingCart size={14} className="md:w-4 md:h-4" />
                    <span>Th√™m v√†o gi·ªè</span>
                  </button>
                  
                  <button 
                    onClick={handleShare}
                    className="py-2 md:py-3 rounded-lg border-2 border-gray-300 hover:border-black transition font-medium flex items-center justify-center gap-2 text-xs md:text-sm"
                  >
                    <Share2 size={14} className="md:w-4 md:h-4" />
                    <span>Chia s·∫ª</span>
                  </button>
                </div>
              </div>
            </div>

            <div className="border-t pt-4 md:pt-6 space-y-2 md:space-y-3">
              <div className="flex items-center gap-2 text-xs md:text-sm text-gray-700">
                <Check size={12} className="md:w-4 md:h-4 text-green-600" />
                <span>Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn t·ª´ 2 s·∫£n ph·∫©m</span>
              </div>
              <div className="flex items-center gap-2 text-xs md:text-sm text-gray-700">
                <Check size={12} className="md:w-4 md:h-4 text-green-600" />
                <span>ƒê·ªïi tr·∫£ trong 7 ng√†y n·∫øu kh√¥ng v·ª´a √Ω</span>
              </div>
              <div className="flex items-center gap-2 text-xs md:text-sm text-gray-700">
                <Check size={12} className="md:w-4 md:h-4 text-green-600" />
                <span>ƒê∆∞·ª£c ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n</span>
              </div>
              <div className="flex items-center gap-2 text-xs md:text-sm text-gray-700">
                <Check size={12} className="md:w-4 md:h-4 text-green-600" />
                <span>H·ªó tr·ª£ thanh to√°n COD to√†n qu·ªëc</span>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs Section - V·ªõi Reviews ƒë∆∞·ª£c ƒë∆∞a l√™n ƒë·∫ßu */}
        <div className="mt-8 md:mt-12">
          <div className="border-b border-gray-200">
            <div className="flex gap-4 md:gap-6 lg:gap-8 overflow-x-auto scrollbar-hide">
              {[
                { id: 'reviews', label: `ƒê√°nh gi√° (${product.reviews?.length || 0})` },
                { id: 'description', label: 'M√¥ t·∫£ s·∫£n ph·∫©m' },
                { id: 'details', label: 'Th√¥ng tin chi ti·∫øt' }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`pb-3 md:pb-4 text-sm md:text-base font-medium whitespace-nowrap transition-colors relative ${
                    activeTab === tab.id ? 'text-black' : 'text-gray-500 hover:text-black'
                  }`}
                >
                  {tab.label}
                  {activeTab === tab.id && (
                    <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-black"></div>
                  )}
                </button>
              ))}
            </div>
          </div>

          <div className="py-6 md:py-8">
            {activeTab === 'reviews' && <ReviewsSection />}
            
           {activeTab === 'description' && (
  <div className="max-w-4xl mx-auto space-y-6 md:space-y-8">
    {/* Ki·ªÉm tra xem c√≥ custom content t·ª´ SEO Manager kh√¥ng */}
    {product.attributes?.content_blocks && 
     product.attributes.content_blocks.length > 0 ? (
      // ‚úÖ RENDER CUSTOM CONTENT T·ª™ ADMIN
      <>
        {product.attributes.content_blocks.map((block) => (
          <div key={block.id}>
            {block.type === 'text' ? (
              <div>
                {block.title && (
                  <h3 className="text-lg md:text-xl font-bold mb-2 md:mb-3">
                    {block.title}
                  </h3>
                )}
                <p 
                  className="text-gray-700 leading-relaxed text-sm md:text-base"
                  dangerouslySetInnerHTML={{ __html: block.content }}
                />
              </div>
            ) : block.type === 'image' ? (
              <figure className="my-6 md:my-8">
                {block.url && (
                  <img 
                    src={block.url} 
                    alt={block.alt || product.name} 
                    className="w-full rounded-lg shadow-md"
                    loading="lazy"
                  />
                )}
                {block.caption && (
                  <figcaption className="text-center text-xs md:text-sm text-gray-500 mt-2 md:mt-3 italic">
                    {block.caption}
                  </figcaption>
                )}
              </figure>
            ) : null}
          </div>
        ))}
      </>
    ) : (
      // ‚ùå FALLBACK - N·ªòI DUNG M·∫∂C ƒê·ªäNH (GI·ªÆ NGUY√äN CODE C≈®)
      <>
        <div className="text-center space-y-3 md:space-y-4">
          <p className="text-base md:text-lg leading-relaxed text-gray-800">
            <strong>{product.name}</strong> l√† m·ªôt thi·∫øt k·∫ø hi·ªán ƒë·∫°i, tinh gi·∫£n nh∆∞ng ƒë·∫ßy ƒëi·ªÉm nh·∫•n. 
            S·∫£n ph·∫©m kh√¥ng ch·ªâ d·ªÖ ph·ªëi c√πng nhi·ªÅu ki·ªÉu trang ph·ª•c kh√°c nhau m√† c√≤n kh√©o l√©o t√¥n l√™n 
            phong c√°ch ri√™ng c·ªßa ng∆∞·ªùi m·∫∑c.
          </p>
          <p className="text-gray-700 leading-relaxed text-sm md:text-base">
            C√≥ nh·ªØng m√≥n ƒë·ªì m√† ch·ªâ qua √°nh nh√¨n ƒë·∫ßu ti√™n, b·∫°n c√≥ th·ªÉ c·∫£m nh·∫≠n ngay s·ª± duy√™n d√°ng tinh t·∫ø. 
            <strong> {product.name}</strong> ch√≠nh l√† m·ªôt trong s·ªë ƒë√≥.
          </p>
        </div>

        <figure className="my-6 md:my-8">
          <img 
            src={productImages[0]} 
            alt={product.name} 
            className="w-full rounded-lg shadow-md"
          />
          <figcaption className="text-center text-xs md:text-sm text-gray-500 mt-2 md:mt-3 italic">
            {product.name} - Thi·∫øt k·∫ø sang tr·ªçng, tinh t·∫ø
          </figcaption>
        </figure>

        <div className="space-y-4 md:space-y-6">
          <div>
            <h3 className="text-lg md:text-xl font-bold mb-2 md:mb-3">Ki·ªÉu d√°ng duy√™n d√°ng, t·∫°o chi·ªÅu s√¢u</h3>
            <p className="text-gray-700 leading-relaxed text-sm md:text-base">
              ƒê∆∞·ªùng c·∫Øt tinh t·∫ø v√† chi ti·∫øt ph·ªëi h·ª£p kh√©o l√©o, v·ª´a t·∫°o c·∫£m gi√°c thanh m·∫£nh h∆°n 
              cho v√≥c d√°ng, v·ª´a gi√∫p outfit tr·ªü n√™n cu·ªën h√∫t m√† kh√¥ng c·∫ßn qu√° c·∫ßu k·ª≥. Thi·∫øt k·∫ø 
              n√†y kh√¥ng ch·ªâ ƒë·∫πp m√† c√≤n r·∫•t d·ªÖ ·ª©ng d·ª•ng trong nhi·ªÅu ho√†n c·∫£nh.
            </p>
          </div>
          <div>
            <h3 className="text-lg md:text-xl font-bold mb-2 md:mb-3">D·ªÖ d√†ng ph·ªëi ƒë·ªì, linh ho·∫°t trong nhi·ªÅu phong c√°ch</h3>
            <p className="text-gray-700 leading-relaxed text-sm md:text-base mb-3 md:mb-4">
              S·∫£n ph·∫©m c√≥ th·ªÉ k·∫øt h·ª£p v·ªõi nhi·ªÅu ki·ªÉu √°o kh√°c nhau - t·ª´ √°o s∆° mi c√¥ng s·ªü ƒë·∫øn √°o thun 
              basic, hay nh·ªØng chi·∫øc √°o crop top c√° t√≠nh. M√†u s·∫Øc trung t√≠nh gi√∫p b·∫°n d·ªÖ d√†ng mix-match 
              v·ªõi c√°c items kh√°c trong t·ªß ƒë·ªì.
            </p>
            <div className="bg-gray-50 p-4 md:p-6 rounded-lg border border-gray-200">
              <h4 className="font-semibold mb-2 md:mb-3 flex items-center gap-2 text-sm md:text-base">
                <span>üí°</span>
                G·ª£i √Ω ph·ªëi ƒë·ªì c√πng {product.name}:
              </h4>
              <ul className="space-y-1 md:space-y-2 text-xs md:text-sm text-gray-700">
                <li>‚úì √Åo s∆° mi tr·∫Øng + gi√†y cao g√≥t ‚Üí phong c√°ch c√¥ng s·ªü thanh l·ªãch</li>
                <li>‚úì √Åo thun basic + sneakers ‚Üí outfit d·∫°o ph·ªë nƒÉng ƒë·ªông</li>
                <li>‚úì √Åo √¥m c·ªï l·ªç + boots ‚Üí look sang tr·ªçng cho bu·ªïi t·ªëi</li>
                <li>‚úì √Åo ki·ªÉu ph·ªëi l·ª•a + sandals ‚Üí v·∫ª ngo√†i n·ªØ t√≠nh, d·ªãu d√†ng</li>
              </ul>
            </div>
          </div>
          <div>
            <h3 className="text-lg md:text-xl font-bold mb-2 md:mb-3">ƒê∆°n gi·∫£n nh∆∞ng duy√™n d√°ng, thanh nh√£ nh∆∞ng kh√¥ng m·ªù nh·∫°t</h3>
            <p className="text-gray-700 leading-relaxed text-sm md:text-base">
              <strong>{product.name}</strong> l√† minh ch·ª©ng cho tri·∫øt l√Ω th·ªùi trang "√≠t m√† ch·∫•t": 
              ƒë∆°n gi·∫£n nh∆∞ng duy√™n d√°ng, thanh nh√£ nh∆∞ng kh√¥ng m·ªù nh·∫°t. ƒê√¢y l√† item kh√¥ng th·ªÉ thi·∫øu 
              trong t·ªß ƒë·ªì c·ªßa nh·ªØng ng∆∞·ªùi y√™u phong c√°ch tinh t·∫ø, d·ªÖ ·ª©ng d·ª•ng nh∆∞ng v·∫´n c√≥ chi·ªÅu s√¢u ri√™ng.
            </p>
          </div>
        </div>

        <div className="text-center py-4 md:py-6 my-6 md:my-8 border-t border-b border-gray-200">
          <p className="text-gray-700 italic text-base md:text-lg">
            N·∫øu b·∫°n ƒëang t√¨m ki·∫øm m·ªôt s·∫£n ph·∫©m ƒë·ªÉ nh·∫π nh√†ng l√†m m·ªõi b·∫£n th√¢n v√† style c·ªßa m√¨nh, 
            ƒë√¢y ch√≠nh l√† m√≥n ƒë·ªì ƒë√°ng ƒë·ªÉ "ƒë·∫∑t ngay".
          </p>
        </div>
      </>
    )}
  </div>
)}

            {activeTab === 'details' && (
              <div className="max-w-3xl">
                <div className="space-y-2 md:space-y-3">
                  {[
                    { label: 'Ch·∫•t li·ªáu', value: 'Cotton cao c·∫•p, pha spandex' },
                    { label: 'Xu·∫•t x·ª©', value: 'Vi·ªát Nam' },
                    { label: 'M√†u s·∫Øc', value: product.category || 'ƒêa d·∫°ng' },
                    { label: 'Size', value: sizes.join(', ') },
                    { label: 'H∆∞·ªõng d·∫´n gi·∫∑t', value: 'Gi·∫∑t tay ho·∫∑c m√°y gi·∫∑t ·ªü ch·∫ø ƒë·ªô nh·∫π, kh√¥ng d√πng n∆∞·ªõc n√≥ng' },
                    { label: 'H∆∞·ªõng d·∫´n b·∫£o qu·∫£n', value: 'Ph∆°i ·ªü n∆°i tho√°ng m√°t, tr√°nh √°nh n·∫Øng tr·ª±c ti·∫øp' },
                    { label: 'Th∆∞∆°ng hi·ªáu', value: brand?.name || 'DIOR STORE' }
                  ].map((item, index) => (
                    <div key={index} className="flex py-2 md:py-3 border-b last:border-0 text-xs md:text-sm">
                      <span className="w-28 md:w-40 text-gray-600 font-medium">{item.label}:</span>
                      <span className="flex-1 text-gray-900">{item.value}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Related Products */}
        {relatedProducts.length > 0 && (
          <div className="mt-12 md:mt-16 border-t pt-8 md:pt-12">
            <h2 className="text-xl md:text-2xl lg:text-3xl font-bold mb-6 md:mb-8 text-center">
              S·∫£n Ph·∫©m Li√™n Quan
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4 lg:gap-6">
              {relatedProducts.map((relatedProduct) => (
                <ProductCard
                  key={relatedProduct.id}
                  product={relatedProduct}
                  onAddToCart={onAddToCart}
                />
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Size Guide Modal */}
      {showSizeGuide && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4" onClick={() => setShowSizeGuide(false)}>
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <div className="sticky top-0 bg-white border-b p-4 flex items-center justify-between">
              <h3 className="text-lg font-bold">H∆∞·ªõng d·∫´n ch·ªçn size</h3>
              <button onClick={() => setShowSizeGuide(false)} className="p-1 hover:bg-gray-100 rounded">
                <X size={20} />
              </button>
            </div>
            <div className="p-6">
              <img src={sizeGuideImage} alt="Size Guide" className="w-full rounded-lg mb-4" />
              <div className="space-y-3">
                <p className="text-sm text-gray-700">
                  ƒê·ªÉ ch·ªçn size ph√π h·ª£p, h√£y ƒëo v√≤ng eo v√† chi·ªÅu cao c·ªßa b·∫°n, sau ƒë√≥ so s√°nh v·ªõi b·∫£ng size tr√™n.
                </p>
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <h4 className="font-semibold text-sm mb-2">L∆∞u √Ω quan tr·ªçng:</h4>
                  <ul className="text-xs space-y-1 text-yellow-800">
                    <li>‚Ä¢ N·∫øu b·∫°n ·ªü gi·ªØa hai size, h√£y ch·ªçn size l·ªõn h∆°n</li>
                    <li>‚Ä¢ S·∫£n ph·∫©m c√≥ th·ªÉ gi√£n nh·∫π sau v√†i l·∫ßn m·∫∑c ƒë·∫ßu ti√™n</li>
                    <li>‚Ä¢ ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n size ch√≠nh x√°c, h√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Shipping Policy Modal */}
      {showShippingPolicy && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4" onClick={() => setShowShippingPolicy(false)}>
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <div className="sticky top-0 bg-white border-b p-4 flex items-center justify-between">
              <h3 className="text-lg font-bold">Ch√≠nh s√°ch v·∫≠n chuy·ªÉn & ƒë·ªïi tr·∫£</h3>
              <button onClick={() => setShowShippingPolicy(false)} className="p-1 hover:bg-gray-100 rounded">
                <X size={20} />
              </button>
            </div>
            <div className="p-6 space-y-4">
              <div>
                <h4 className="font-semibold mb-2">üöö V·∫≠n chuy·ªÉn</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  <li>‚Ä¢ Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng t·ª´ 2 s·∫£n ph·∫©m</li>
                  <li>‚Ä¢ Giao h√†ng to√†n qu·ªëc trong 2-5 ng√†y l√†m vi·ªác</li>
                  <li>‚Ä¢ ƒê∆∞·ª£c ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2">üîÑ ƒê·ªïi tr·∫£</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  <li>‚Ä¢ ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ trong 7 ng√†y n·∫øu kh√¥ng v·ª´a √Ω</li>
                  <li>‚Ä¢ S·∫£n ph·∫©m ph·∫£i c√≤n nguy√™n tag, ch∆∞a qua s·ª≠ d·ª•ng</li>
                  <li>‚Ä¢ H·ªó tr·ª£ ƒë·ªïi size n·∫øu c√≤n h√†ng</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2">üí≥ Thanh to√°n</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  <li>‚Ä¢ H·ªó tr·ª£ thanh to√°n COD to√†n qu·ªëc</li>
                  <li>‚Ä¢ Chuy·ªÉn kho·∫£n ng√¢n h√†ng v·ªõi nhi·ªÅu ∆∞u ƒë√£i</li>
                  <li>‚Ä¢ Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ Momo, ZaloPay</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductDetailPage;