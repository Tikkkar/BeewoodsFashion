// ============================================
// services/geminiSEOService.ts - Client-side Gemini SEO Service
// ============================================

import { GoogleGenerativeAI } from "@google/generative-ai";

// Kh·ªüi t·∫°o Gemini AI
const genAI = new GoogleGenerativeAI(
  process.env.REACT_APP_GEMINI_API_KEY || ""
);
console.log(
  "üîë Gemini API Key:",
  process.env.REACT_APP_GEMINI_API_KEY ? "Loaded ‚úÖ" : "Missing ‚ùå"
);

interface SEOContentRequest {
  productName: string;
  productDescription?: string;
  productPrice?: string;
  productCategory?: string;
  images?: string[]; // Base64 ho·∫∑c URLs
  targetKeywords?: string[];
  tone?: "professional" | "casual" | "friendly";
}

interface SEOContentResponse {
  seoTitle: string;
  seoDescription: string;
  seoKeywords: string;
  contentBlocks: Array<{
    type: "text" | "image";
    title?: string;
    content?: string;
    url?: string;
    alt?: string;
    caption?: string;
  }>;
}

interface ImageAnalysisResponse {
  description: string;
  suggestedAltText: string;
  suggestedCaption: string;
  keywords: string[];
}

/**
 * Helper: Parse JSON response t·ª´ Gemini (lo·∫°i b·ªè markdown wrapper)
 */
function parseGeminiJSON(text: string): any {
  let cleanText = text.trim();

  // Lo·∫°i b·ªè markdown code blocks
  if (cleanText.startsWith("```json")) {
    cleanText = cleanText.replace(/^```json\n?/g, "").replace(/\n?```$/g, "");
  } else if (cleanText.startsWith("```")) {
    cleanText = cleanText.replace(/^```\n?/g, "").replace(/\n?```$/g, "");
  }

  // T√¨m JSON object ƒë·∫ßu ti√™n trong text (fallback)
  const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
  if (jsonMatch) {
    cleanText = jsonMatch[0];
  }

  try {
    return JSON.parse(cleanText);
  } catch (error) {
    console.error("‚ùå Failed to parse JSON:", cleanText.substring(0, 200));
    throw new Error("AI tr·∫£ v·ªÅ format kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i!");
  }
}

/**
 * T·∫°o n·ªôi dung SEO t·ª± ƒë·ªông t·ª´ th√¥ng tin s·∫£n ph·∫©m
 */
export async function generateSEOContent(
  request: SEOContentRequest
): Promise<SEOContentResponse> {
  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-exp",
      generationConfig: {
        temperature: 0.8,
        maxOutputTokens: 4096,
      },
    });

    const prompt = buildSEOPrompt(request);

    console.log("ü§ñ Generating SEO content with Gemini...");

    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();

    console.log("üìù Raw AI response:", text.substring(0, 200));

    // Parse JSON response - lo·∫°i b·ªè markdown wrapper
    const parsed = parseGeminiJSON(text);

    return {
      seoTitle: parsed.seo_title || "",
      seoDescription: parsed.seo_description || "",
      seoKeywords: parsed.seo_keywords || "",
      contentBlocks: parsed.content_blocks || [],
    };
  } catch (error) {
    console.error("‚ùå Error generating SEO content:", error);
    throw new Error("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung SEO. Vui l√≤ng th·ª≠ l·∫°i!");
  }
}
function blobToBase64(blob: Blob): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
}
/**
 * Ph√¢n t√≠ch ·∫£nh s·∫£n ph·∫©m v√† t·∫°o m√¥ t·∫£, alt text, caption
 */
export async function analyzeProductImage(
  imageData: string, // Base64 ho·∫∑c URL
  productContext?: string
): Promise<ImageAnalysisResponse> {
  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-exp",
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1024,
      },
    });

    // Prepare image part
    let imagePart: any;

    if (imageData.startsWith("data:image")) {
      // Base64 image
      const base64Data = imageData.split(",")[1];
      const mimeType = imageData.split(";")[0].split(":")[1];

      imagePart = {
        inlineData: {
          data: base64Data,
          mimeType: mimeType,
        },
      };
    } else {
      // URL image - convert to base64 first
      console.log("üîÑ Converting URL image to base64...");
      const response = await fetch(imageData);
      const blob = await response.blob();
      const base64 = await blobToBase64(blob);
      const base64Data = base64.split(",")[1];

      imagePart = {
        inlineData: {
          data: base64Data,
          mimeType: blob.type,
        },
      };
      console.log("‚úÖ Image converted successfully");
    }

    const prompt = `Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y c·ªßa s·∫£n ph·∫©m th·ªùi trang${
      productContext ? ` (${productContext})` : ""
    }.

üéØ NHI·ªÜM V·ª§:
1. M√¥ t·∫£ chi ti·∫øt nh·ªØng g√¨ b·∫°n th·∫•y trong ·∫£nh (m√†u s·∫Øc, ki·ªÉu d√°ng, ch·∫•t li·ªáu, style)
2. T·∫°o alt text t·ªëi ∆∞u cho SEO (ng·∫Øn g·ªçn, m√¥ t·∫£ ch√≠nh x√°c)
3. T·∫°o caption h·∫•p d·∫´n ƒë·ªÉ hi·ªÉn th·ªã d∆∞·ªõi ·∫£nh
4. ƒê·ªÅ xu·∫•t 3-5 t·ª´ kh√≥a SEO li√™n quan

üìã Y√äU C·∫¶U:
- M√¥ t·∫£ b·∫±ng ti·∫øng Vi·ªát, chuy√™n nghi·ªáp
- Alt text: 5-15 t·ª´, t·ª± nhi√™n
- Caption: 1-2 c√¢u, thu h√∫t
- T·ª´ kh√≥a: li√™n quan ƒë·∫øn th·ªùi trang, phong c√°ch

‚ö†Ô∏è QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text gi·∫£i th√≠ch.

TR·∫¢ V·ªÄ JSON (ch·ªâ JSON, kh√¥ng c√≥ text kh√°c):
{
  "description": "M√¥ t·∫£ chi ti·∫øt ·∫£nh",
  "suggested_alt_text": "Alt text ng·∫Øn g·ªçn",
  "suggested_caption": "Caption h·∫•p d·∫´n",
  "keywords": ["t·ª´ kh√≥a 1", "t·ª´ kh√≥a 2", "t·ª´ kh√≥a 3"]
}`;

    const result = await model.generateContent([prompt, imagePart]);
    const response = result.response;
    const text = response.text();

    console.log("üñºÔ∏è Image analysis result:", text.substring(0, 200));

    // Parse JSON - lo·∫°i b·ªè markdown wrapper
    const parsed = parseGeminiJSON(text);

    return {
      description: parsed.description || "",
      suggestedAltText: parsed.suggested_alt_text || "",
      suggestedCaption: parsed.suggested_caption || "",
      keywords: parsed.keywords || [],
    };
  } catch (error) {
    console.error("‚ùå Error analyzing image:", error);
    // Log chi ti·∫øt ƒë·ªÉ debug
    if (error instanceof Error) {
      console.error("Error message:", error.message);
      console.error("Error stack:", error.stack);
    }
    throw new Error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!");
  }
}

/**
 * Build prompt cho vi·ªác t·∫°o n·ªôi dung SEO
 */
function buildSEOPrompt(request: SEOContentRequest): string {
  const {
    productName,
    productDescription,
    productPrice,
    productCategory,
    targetKeywords = [],
    tone = "professional",
  } = request;

  return `B·∫°n l√† chuy√™n gia SEO v√† Content Marketing cho shop th·ªùi trang online.

üì¶ TH√îNG TIN S·∫¢N PH·∫®M:
- T√™n: ${productName}
${productDescription ? `- M√¥ t·∫£: ${productDescription}` : ""}
${productPrice ? `- Gi√°: ${productPrice}` : ""}
${productCategory ? `- Danh m·ª•c: ${productCategory}` : ""}
${
  targetKeywords.length > 0
    ? `- T·ª´ kh√≥a m·ª•c ti√™u: ${targetKeywords.join(", ")}`
    : ""
}

üéØ NHI·ªÜM V·ª§:
T·∫°o n·ªôi dung SEO ho√†n ch·ªânh cho trang s·∫£n ph·∫©m n√†y, bao g·ªìm:

1. **SEO Title** (30-60 k√Ω t·ª±):
   - Bao g·ªìm t·ª´ kh√≥a ch√≠nh
   - H·∫•p d·∫´n, khuy·∫øn kh√≠ch click
   - T·ª± nhi√™n, kh√¥ng spam

2. **SEO Description** (120-160 k√Ω t·ª±):
   - T√≥m t·∫Øt l·ª£i √≠ch s·∫£n ph·∫©m
   - Call-to-action r√µ r√†ng
   - Ch·ª©a t·ª´ kh√≥a m·ªôt c√°ch t·ª± nhi√™n

3. **SEO Keywords** (5-10 t·ª´ kh√≥a):
   - Ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y
   - Li√™n quan ƒë·∫øn s·∫£n ph·∫©m v√† ng√†nh th·ªùi trang
   - K·∫øt h·ª£p c·∫£ t·ª´ kh√≥a chung v√† c·ª• th·ªÉ

4. **Content Blocks** (3-5 kh·ªëi n·ªôi dung):
   - Kh·ªëi 1: Gi·ªõi thi·ªáu s·∫£n ph·∫©m (text)
   - Kh·ªëi 2: ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t (text)
   - Kh·ªëi 3: H∆∞·ªõng d·∫´n ph·ªëi ƒë·ªì/s·ª≠ d·ª•ng (text)
   - Kh·ªëi 4: G·ª£i √Ω th√™m v·ªÅ ch·∫•t li·ªáu/b·∫£o qu·∫£n (text)
   - M·ªói kh·ªëi c√≥ title v√† content chi ti·∫øt

üí° TONE: ${
    tone === "professional"
      ? "Chuy√™n nghi·ªáp, tin c·∫≠y"
      : tone === "casual"
      ? "Th√¢n thi·ªán, g·∫ßn g≈©i"
      : "Nhi·ªát t√¨nh, nƒÉng ƒë·ªông"
  }

üìã QUY ƒê·ªäNH:
- Vi·∫øt b·∫±ng ti·∫øng Vi·ªát
- Tr√°nh t·ª´ kh√≥a spam
- N·ªôi dung gi√° tr·ªã, t·ª± nhi√™n
- C√≥ th·ªÉ d√πng HTML tags: <strong>, <em>, <br>

TR·∫¢ V·ªÄ JSON:
{
  "seo_title": "Title t·ªëi ∆∞u SEO",
  "seo_description": "Description h·∫•p d·∫´n",
  "seo_keywords": "t·ª´ kh√≥a 1, t·ª´ kh√≥a 2, t·ª´ kh√≥a 3",
  "content_blocks": [
    {
      "type": "text",
      "title": "Ti√™u ƒë·ªÅ kh·ªëi",
      "content": "N·ªôi dung chi ti·∫øt c√≥ th·ªÉ d√πng HTML"
    }
  ]
}`;
}

/**
 * Generate content cho 1 kh·ªëi n·ªôi dung c·ª• th·ªÉ
 */
export async function generateContentBlock(
  blockType: "introduction" | "features" | "styling" | "care" | "custom",
  productInfo: SEOContentRequest,
  customPrompt?: string
): Promise<{ title: string; content: string }> {
  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-exp",
      generationConfig: {
        temperature: 0.8,
        maxOutputTokens: 1024,
        responseMimeType: "application/json",
      },
    });

    let prompt = "";

    switch (blockType) {
      case "introduction":
        prompt = `Vi·∫øt ph·∫ßn gi·ªõi thi·ªáu cho s·∫£n ph·∫©m "${productInfo.productName}".
        N·ªôi dung: 2-3 ƒëo·∫°n, gi·ªõi thi·ªáu t·ªïng quan, t·∫°o ·∫•n t∆∞·ª£ng ban ƒë·∫ßu.`;
        break;
      case "features":
        prompt = `Vi·∫øt ph·∫ßn ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t cho s·∫£n ph·∫©m "${productInfo.productName}".
        N·ªôi dung: Li·ªát k√™ 3-5 ƒëi·ªÉm n·ªïi b·∫≠t, m·ªói ƒëi·ªÉm 1-2 c√¢u.`;
        break;
      case "styling":
        prompt = `Vi·∫øt ph·∫ßn g·ª£i √Ω ph·ªëi ƒë·ªì cho s·∫£n ph·∫©m "${productInfo.productName}".
        N·ªôi dung: 2-3 c√°ch ph·ªëi ƒë·ªì ƒë·∫πp, ph√π h·ª£p nhi·ªÅu ho√†n c·∫£nh.`;
        break;
      case "care":
        prompt = `Vi·∫øt ph·∫ßn h∆∞·ªõng d·∫´n b·∫£o qu·∫£n cho s·∫£n ph·∫©m "${productInfo.productName}".
        N·ªôi dung: Tips b·∫£o qu·∫£n, gi·∫∑t ·ªßi ƒë√∫ng c√°ch.`;
        break;
      case "custom":
        prompt = customPrompt || "Vi·∫øt n·ªôi dung cho s·∫£n ph·∫©m";
        break;
    }

    prompt += `\n\nS·∫£n ph·∫©m: ${productInfo.productName}
${
  productInfo.productDescription
    ? `M√¥ t·∫£: ${productInfo.productDescription}`
    : ""
}

TR·∫¢ V·ªÄ JSON:
{
  "title": "Ti√™u ƒë·ªÅ ph√π h·ª£p",
  "content": "N·ªôi dung chi ti·∫øt, c√≥ th·ªÉ d√πng <strong>, <em>, <br>"
}`;

    const result = await model.generateContent(prompt);
    const text = result.response.text();

    // Parse JSON - lo·∫°i b·ªè markdown wrapper
    const parsed = parseGeminiJSON(text);

    return {
      title: parsed.title || "",
      content: parsed.content || "",
    };
  } catch (error) {
    console.error("‚ùå Error generating content block:", error);
    throw new Error("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i!");
  }
}

/**
 * Health check
 */
export function checkGeminiConfig(): { configured: boolean; message: string } {
  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;

  if (!apiKey) {
    return {
      configured: false,
      message: "REACT_APP_GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong .env",
    };
  }

  return {
    configured: true,
    message: "Gemini API ƒë√£ s·∫µn s√†ng",
  };
}
