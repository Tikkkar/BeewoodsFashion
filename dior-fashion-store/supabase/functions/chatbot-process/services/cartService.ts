// ============================================
// services/cartService.ts - HO√ÄN CH·ªàNH & N√ÇNG C·∫§P
// ============================================

import { createSupabaseClient } from "../utils/supabaseClient.ts";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho m·ªôt s·∫£n ph·∫©m trong gi·ªè h√†ng
interface CartItem {
  product_id: string;
  name: string;
  price: number;
  size: string;
  quantity: number;
  image: string;
}

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ chung cho c√°c service
interface ServiceResult {
  success: boolean;
  message: string;
  cart?: CartItem[];
}

/**
 * L·∫•y gi·ªè h√†ng t·ª´ context c·ªßa cu·ªôc tr√≤ chuy·ªán.
 * T·ª± ƒë·ªông t·∫°o gi·ªè h√†ng r·ªóng n·∫øu ch∆∞a t·ªìn t·∫°i.
 */
export async function getOrCreateCart(
  conversationId: string,
): Promise<CartItem[]> {
  const supabase = createSupabaseClient();

  const { data: conversation, error } = await supabase
    .from("chatbot_conversations")
    .select("context")
    .eq("id", conversationId)
    .single();

  if (error || !conversation) {
    console.error("Error fetching conversation for cart:", error);
    return [];
  }

  // üî• N√ÇNG C·∫§P: X·ª≠ l√Ω tr∆∞·ªùng h·ª£p context kh√¥ng ph·∫£i l√† m·ªôt object h·ª£p l·ªá
  if (
    typeof conversation.context !== "object" || conversation.context === null
  ) {
    return [];
  }

  const cart = conversation.context?.cart || [];
  // ƒê·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ m·ªôt m·∫£ng
  return Array.isArray(cart) ? (cart as CartItem[]) : [];
}

/**
 * üî• N√ÇNG C·∫§P: H√†m helper ƒë·ªÉ l∆∞u gi·ªè h√†ng m·ªôt c√°ch an to√†n
 * S·ª≠ d·ª•ng RPC function 'merge_context' ƒë·ªÉ h·ª£p nh·∫•t d·ªØ li·ªáu,
 * tr√°nh ghi ƒë√® m·∫•t c√°c th√¥ng tin kh√°c trong context.
 */
async function saveCart(
  conversationId: string,
  cart: CartItem[],
): Promise<void> {
  const supabase = createSupabaseClient();
  const { error } = await supabase.rpc("merge_context", {
    p_conversation_id: conversationId,
    p_new_context: { cart: cart },
  });
  if (error) {
    console.error("Error saving cart via RPC:", error);
  }
}

/**
 * Th√™m m·ªôt s·∫£n ph·∫©m v√†o gi·ªè h√†ng.
 * N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, s·∫Ω c·ªông d·ªìn s·ªë l∆∞·ª£ng.
 */
export async function addToCart(
  conversationId: string,
  item: CartItem,
): Promise<CartItem[]> {
  const cart = await getOrCreateCart(conversationId);

  const existingIndex = cart.findIndex(
    (i: CartItem) => i.product_id === item.product_id && i.size === item.size,
  );

  if (existingIndex >= 0) {
    cart[existingIndex].quantity += item.quantity;
  } else {
    cart.push(item);
  }

  await saveCart(conversationId, cart);

  console.log(`‚úÖ Added to cart: ${item.name} x${item.quantity}`);
  return cart;
}

/**
 * ‚≠ê M·ªöI: X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.
 * D√†nh cho tool `remove_from_cart`.
 */
export async function removeFromCart(
  conversationId: string,
  productId: string,
): Promise<ServiceResult> {
  const cart = await getOrCreateCart(conversationId);
  const initialLength = cart.length;

  const newCart = cart.filter((item) => item.product_id !== productId);

  if (newCart.length < initialLength) {
    await saveCart(conversationId, newCart);
    console.log(`üóëÔ∏è Removed product ${productId} from cart.`);
    return {
      success: true,
      message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.",
      cart: newCart,
    };
  } else {
    console.warn(`‚ö†Ô∏è Product ${productId} not found in cart to remove.`);
    return {
      success: false,
      message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†y trong gi·ªè h√†ng.",
    };
  }
}

/**
 * ‚≠ê M·ªöI: C·∫≠p nh·∫≠t th√¥ng tin m·ªôt s·∫£n ph·∫©m trong gi·ªè (s·ªë l∆∞·ª£ng, size).
 * D√†nh cho tool `update_cart_item`.
 */
export async function updateCartItem(
  conversationId: string,
  args: { product_id: string; quantity: number; size?: string },
): Promise<ServiceResult> {
  // N·∫øu s·ªë l∆∞·ª£ng <= 0, th·ª±c hi·ªán x√≥a s·∫£n ph·∫©m
  if (args.quantity <= 0) {
    return removeFromCart(conversationId, args.product_id);
  }

  const cart = await getOrCreateCart(conversationId);
  let itemIndex = -1;

  // ∆Øu ti√™n t√¨m ch√≠nh x√°c product_id v√† size n·∫øu ƒë∆∞·ª£c cung c·∫•p
  if (args.size) {
    itemIndex = cart.findIndex((i) =>
      i.product_id === args.product_id && i.size === args.size
    );
  } // N·∫øu kh√¥ng c√≥ size, nh∆∞ng trong gi·ªè ch·ªâ c√≥ 1 lo·∫°i s·∫£n ph·∫©m ƒë√≥ -> t·ª± ƒë·ªông ch·ªçn
  else {
    const matchingItems = cart.filter((i) => i.product_id === args.product_id);
    if (matchingItems.length === 1) {
      itemIndex = cart.findIndex((i) => i.product_id === args.product_id);
    } else if (matchingItems.length > 1) {
      return {
        success: false,
        message:
          "S·∫£n ph·∫©m n√†y c√≥ nhi·ªÅu size trong gi·ªè, ch·ªã vui l√≤ng ch·ªâ r√µ size mu·ªën c·∫≠p nh·∫≠t ·∫°.",
      };
    }
  }

  if (itemIndex >= 0) {
    cart[itemIndex].quantity = args.quantity;
    if (args.size) {
      cart[itemIndex].size = args.size;
    }
    await saveCart(conversationId, cart);
    console.log(
      `üîÑ Updated cart item ${args.product_id} to quantity ${args.quantity}.`,
    );
    return {
      success: true,
      message: `ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng.`,
      cart: cart,
    };
  } else {
    console.warn(`‚ö†Ô∏è Item ${args.product_id} not found to update.`);
    return {
      success: false,
      message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†y trong gi·ªè ƒë·ªÉ c·∫≠p nh·∫≠t.",
    };
  }
}

/**
 * X√≥a to√†n b·ªô s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.
 */
export async function clearCart(conversationId: string): Promise<void> {
  const cart = await getOrCreateCart(conversationId);
  if (cart.length > 0) {
    await saveCart(conversationId, []);
  }
  console.log("‚úÖ Cart cleared");
}

/**
 * ‚≠ê M·ªöI: L·∫•y t√≥m t·∫Øt gi·ªè h√†ng d∆∞·ªõi d·∫°ng m·ªôt chu·ªói vƒÉn b·∫£n th√¢n thi·ªán.
 * D√†nh cho tool `view_cart`.
 */
export async function getCartSummary(conversationId: string): Promise<string> {
  const cart = await getOrCreateCart(conversationId);

  if (cart.length === 0) {
    return "D·∫° gi·ªè h√†ng c·ªßa ch·ªã hi·ªán ƒëang tr·ªëng ·∫°.";
  }

  const totalQuantity = cart.reduce((sum, item) => sum + item.quantity, 0);
  const subtotal = cart.reduce(
    (sum, item) => sum + (item.price * item.quantity),
    0,
  );

  const itemsList = cart.map((item) =>
    `‚Ä¢ ${item.name} (Size ${item.size}) x${item.quantity} - ${
      formatPrice(item.price * item.quantity)
    }`
  ).join("\n");

  return `D·∫°, em ki·ªÉm tra gi·ªè h√†ng c·ªßa ch·ªã ƒëang c√≥ ${totalQuantity} s·∫£n ph·∫©m:\n${itemsList}\n\nüí∞ T·∫°m t√≠nh: ${
    formatPrice(subtotal)
  }`;
}

/**
 * ƒê·ªãnh d·∫°ng s·ªë th√†nh ti·ªÅn t·ªá VNƒê.
 */
function formatPrice(price: number): string {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
  }).format(price);
}
